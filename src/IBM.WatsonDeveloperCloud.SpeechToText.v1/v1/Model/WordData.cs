/**
* Copyright 2017 IBM Corp. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

using Newtonsoft.Json;
using System.Collections.Generic;

namespace IBM.WatsonDeveloperCloud.SpeechToText.v1.Model
{
    public partial class WordData
    {
        /// <summary>
        /// Gets or sets a custom word from the custom model. The spelling of
        /// the word is used to train the model.
        /// </summary>
        [JsonProperty(PropertyName = "word")]
        public string Word { get; set; }

        /// <summary>
        /// Gets or sets an array of pronunciations for the custom word. The
        /// array can include the sounds-like pronunciation automatically
        /// generated by the service if none is provided for the word; the
        /// service adds this pronunciation when it finishes pre-processing
        /// the word.
        /// </summary>
        [JsonProperty(PropertyName = "sounds_like")]
        public IList<string> SoundsLike { get; set; }

        /// <summary>
        /// Gets or sets the spelling of the custom word that the service uses
        /// to display the word in a transcript. The field contains an empty
        /// string if no display-as value is provided for the word, in which
        /// case the word is displayed as it is spelled.
        /// </summary>
        [JsonProperty(PropertyName = "display_as")]
        public string DisplayAs { get; set; }

        /// <summary>
        /// Gets or sets a sum of the number of times the word is found across
        /// all corpora. For example, if the word occurs five times in one
        /// corpus and seven times in another, its count is `12`. If you add
        /// a custom word to a model before it is added by any corpora, the
        /// count begins at `1`; if the word is added from a corpus first and
        /// later modified, the count reflects only the number of times it is
        /// found in corpora.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// Gets or sets an array of sources that describes how the word was
        /// added to the custom model's words resource. For OOV words added
        /// from a corpus, includes the name of the corpus; if the word was
        /// added by multiple corpora, the names of all corpora are listed.
        /// If the word was modified or added by the user directly, the field
        /// includes the string `user`.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public IList<string> Source { get; set; }

        /// <summary>
        /// Gets or sets if the service discovered one or more problems with
        /// the custom word's definition that you need to correct, an array
        /// that describes each of the errors.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public IList<WordError> Error { get; set; }
    }
}
